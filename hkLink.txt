<blockquote><pre>
<span class="comments">/*
 *  はてなダイアリーキーワード自動リンクAPI 利用プログラム
 *      -- 標準入力またはファイルから読み込んだ文字列にキーワードリンクを
 *         埋め込み、標準出力に書き出す
 *
 *      written by H.Tsujimura      17 Jun 2004
 *      Copyleft 2004 by H.Tsujimura (tsupo@na.rim.or.jp)
 *
 *      使い方:
 *          hkLink [-p] [-c] [ファイル名 [...]]
 *              -p: proxy サーバ経由で XML-RPC API を実行する
 *                   (1) カレントディレクトリに proxy.txt という名
 *                       前のファイルがあれば、proxy.txt から設定を
 *                       読み込む
 *                   (2) proxy.txt が存在しない場合、proxy の設定は
 *                       Internet Explorer の設定を流用する [Windows
 *                       の場合のみ]
 *
 *                          proxy.txt のフォーマット
 *                            以下の2行からなるテキストファイル
 *                              proxy サーバ名(または IPアドレス)
 *                              ポート番号
 *              -c: 「はてなキーワード自動リンクAPI」を使う代わりに、
 *                  「はてなキーワード一覧取得API」+自前のキーワード
 *                  リンク変換処理を使用する
 *
 *      注意:
 *      (1) 「はてなキーワード自動リンクAPI」が返す結果は文字化けしてい
 *          ることがある。(2004年6月17日現在)
 *              例) 入力文字列が
 *                      てへ
 *                      こうさぎ
 *                      なかはらまい
 *                  のようにひらがなのみが偶数個連続する文字列の場合、
 *                  文字化けするようである。ただし、「、」や「。」を含
 *                  む場合は文字化けしない。
 *      (2) 2004年6月18日14時現在、入力文字列に関係なく、常に空文字列が
 *          返ってくるようになった (メインテナンス中 or サービス停止中 ?)
 *
 *      備考:
 *          「はてなキーワード自動リンクAPI」が返す結果が「空文字列」の
 *          場合は、「はてなキーワード一覧取得API」を使って取得したキー
 *          ワードテーブルを元に自前でキーワードリンクを生成するようにし
 *          た (2004年6月18日)
 *
 */</span>

<span class="reservedKeyword">#include</span> "xmlRPC.h"

<span class="reservedKeyword">void</span>
makeKeywordLink( FILE * fp, <span class="reservedKeyword">int</span> cacheVer )
{
    <span class="reservedKeyword">char</span>    *p, *q, buf[BUFSIZ * 4], result[BUFSIZ * 16];

    <span class="reservedKeyword">while</span> ( ( p = fgets( buf, BUFSIZ - 1, fp ) ) != NULL ) {
        <span class="reservedKeyword">if</span> ( (*p == '\r') || (*p == '\n' ) ) {
            fputs( p, stdout );
            <span class="reservedKeyword">continue</span>;
        }

        <span class="reservedKeyword">if</span> ( !cacheVer ) {
            <span class="comments">/* 「はてなキーワード自動リンクAPI」を呼び出す */</span>
            <span class="comments">/*  ※ setKeywordLink() は入力、出力とも UTF-8 */</span>
            q = setKeywordLink( sjis2utf( buf ),
                                result, 0, "_blank", "keyword" );
            <span class="reservedKeyword">if</span> ( q &amp;&amp; *q ) {
                fputs( utf2sjis( q ), stdout );
                fputc( '\n', stdout );
                <span class="reservedKeyword">continue</span>;
            }

            <span class="comments">/* 変換結果失敗のとき、もしくは変換結果が空文字の場合 */</span>
            cacheVer = 1;
        }

        <span class="comments">/* 自前(xmlRPCライブラリ内)でキーワードリンク変換を実行する      */</span>
        <span class="comments">/*   [キーワード一覧未取得時および前回の取得から72時間以上経過し */</span>
        <span class="comments">/*    たときに、「はてなキーワード一覧取得API」により、キーワー  */</span>
        <span class="comments">/*    ド一覧を取得する]                                          */</span>
        <span class="comments">/*  ※ changeHatenaKeyword() は入力は Shift_JIS、出力は EUC-JP   */</span>
        q = changeHatenaKeyword( buf, result, MODE_HTML );
        <span class="reservedKeyword">if</span> ( q &amp;&amp; *q )
            fputs( euc2sjis( q ), stdout );
        <span class="reservedKeyword">else</span>
            fputs( buf, stdout );
                            <span class="comments">/* 変換失敗時は入力文字列をそのままエコーバック */</span>
    }
}

<span class="reservedKeyword">int</span>
main( <span class="reservedKeyword">int</span> argc, <span class="reservedKeyword">char</span> *argv[] )
{
    <span class="reservedKeyword">int</span>     ret = 0;
    <span class="reservedKeyword">int</span>     useProxy = 0;
    <span class="reservedKeyword">int</span>     cacheVer = 0;

    <span class="reservedKeyword">if</span> ( argc &gt;= 2 ) {
        <span class="reservedKeyword">int</span>     i, j;
        FILE    *fp;

        <span class="reservedKeyword">for</span> ( i = 1; i &lt; argc; i++ ) {
            <span class="reservedKeyword">if</span> ( argv[i][0] == '-' ) {
                <span class="reservedKeyword">for</span> ( j = 0; argv[i][j] != '\0'; j++ ) {
                    <span class="reservedKeyword">switch</span> ( argv[i][j] ) {
                    <span class="reservedKeyword">case</span> 'p':
                        useProxy = !useProxy;
                        setUseProxy( useProxy );
                        <span class="reservedKeyword">break</span>;
                    <span class="reservedKeyword">case</span> 'c':
                        cacheVer = !cacheVer;
                        <span class="reservedKeyword">break</span>;
                    }
                }

                <span class="reservedKeyword">continue</span>;
            }

            fp = fopen( argv[i], "r" );
            <span class="reservedKeyword">if</span> ( fp ) {
                makeKeywordLink( fp, cacheVer );
                fclose( fp );
                ret++;
            }
        }
    }

    <span class="reservedKeyword">if</span> ( ret == 0 ) {
        makeKeywordLink( stdin, cacheVer );
        ret++;
    }

    <span class="reservedKeyword">return</span> ( ret );
}
</pre></blockquote>
